{"version":3,"sources":["components/table/Table.js","components/Form/Form.js","components/app/App.js","serviceWorker.js","index.js"],"names":["TableHead","TableBody","props","rows","characterData","notes","map","row","index","key","name","job","onClick","removeNote","Table","character","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","bind","keyPressed","this","htmlFor","type","id","onChange","onKeyPress","React","Component","App","note","filter","i","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAEMA,G,MAAY,WACZ,OACE,+BACE,4BACE,oCACA,+CAMNC,EAAY,SAAAC,GAChB,IAAMC,EAAOD,EAAME,cAAcC,MAAMC,KAAI,SAACC,EAAKC,GAC/C,OACE,wBAAIC,IAAMD,GACR,gCAAMD,EAAIG,KAAV,KACA,gCAAMH,EAAII,IAAV,KACA,4BACE,4BAAQC,QAAY,kBAAMV,EAAMW,WAAWL,KAA3C,gBAKR,OAAO,+BAAQL,IAqBFW,EAjBD,SAAAZ,GAAU,IAEda,EAA0Bb,EAA1Ba,UAAWF,EAAeX,EAAfW,WAIjB,OACE,+BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWT,cAAiBW,EAAWF,WAAcA,M,OC4B1CG,E,kDA/Df,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IAMVe,aAAe,CACdP,KAAM,GACNC,IAAK,IATa,EAYpBO,MAAQ,EAAKD,aAZO,EAenBE,aAAe,SAAAC,GAAU,IAAD,EACAA,EAAMC,OAArBX,EADe,EACfA,KAAMY,EADS,EACTA,MAEb,EAAKC,SAAL,eACGb,EAAOY,KAnBO,EAuBnBE,WAAa,WACX,EAAKtB,MAAMuB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,eAvBjB,EAAKE,aAAe,EAAKA,aAAaO,KAAlB,gBACpB,EAAKF,WAAa,EAAKA,WAAWE,KAAhB,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAJL,E,uDA6BRN,GACO,UAAdA,EAAMX,KACRmB,KAAKJ,e,+BAIG,IAAD,EACaI,KAAKV,MAAlBR,EADA,EACAA,KAAMC,EADN,EACMA,IAEb,OACE,8BACE,2BAAOkB,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLpB,KAAK,OACLqB,GAAG,OACHT,MAAOZ,EACPsB,SAAYJ,KAAKT,eACnB,2BAAOU,QAAQ,OAAf,eACA,2BACEC,KAAK,OACLpB,KAAK,MACLqB,GAAG,MACHT,MAAOX,EACPqB,SAAYJ,KAAKT,aAChBc,WAAYL,KAAKD,aAEpB,2BAAOG,KAAK,SAASR,MAAM,SAASV,QAAUgB,KAAKJ,kB,GAzDxCU,IAAMC,WC0CVC,E,kDArCb,WAAYlC,GAAO,IAAD,8BAClB,cAAMA,IASNuB,aAAe,SAAAY,GACb,EAAKd,SAAS,CACZlB,MAAM,GAAD,mBAAM,EAAKa,MAAMb,OAAjB,CAAwBgC,OAZf,EAgBlBxB,WAAa,SAAAL,GAAU,IACZH,EAAS,EAAKa,MAAdb,MAEP,EAAKkB,SAAS,CACZlB,MAAOA,EAAMiC,QAAO,SAACvB,EAAWwB,GAC9B,OAAOA,IAAM/B,QAnBrB,EAAKK,WAAa,EAAKA,WAAWa,KAAhB,gBAClB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKR,MAAS,CACZb,MAAO,IANS,E,qDA2BhB,OACE,yBAAKmC,UAAU,OACb,2CACA,kBAAC,EAAD,CAAMf,aAAgBG,KAAKH,eAC3B,kBAAC,EAAD,CAAOV,UAAWa,KAAKV,MAAOL,WAAYe,KAAKf,kB,GAhCrCqB,IAAMC,WCMJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e36c307f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHead = () => {\n      return (\n        <thead>\n          <tr>\n            <th>Task</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n      )\n    }\n\nconst TableBody = props => {\n  const rows = props.characterData.notes.map((row, index) => {\n    return (\n      <tr key= {index}>\n        <td> {row.name} </td>\n        <td> {row.job} </td>\n        <td>\n          <button onClick = { () => props.removeNote(index) }>Delete </button>\n        </td>\n      </tr>\n    )\n  })\n  return <tbody>{rows}</tbody>\n\n}\n\nconst Table = props => {\n\n  const { character, removeNote } = props\n\n\n\n    return (\n      <table>\n      <TableHead />\n      <TableBody characterData = {character} removeNote = {removeNote}/>\n      </table>\n    )\n\n\n}\n\n\nexport default Table\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(props) {\n      super(props)\n      this.handleChange = this.handleChange.bind(this)\n      this.submitForm = this.submitForm.bind(this)\n        this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  initialState = {\n   name: '',\n   job: '',\n }\n\n state = this.initialState\n\n\n  handleChange = event => {\n    const {name, value} = event.target\n\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState)\n  }\n\n\n  keyPressed(event) {\n  if (event.key === \"Enter\") {\n    this.submitForm()\n  }\n  }\n\n  render() {\n    const {name, job} = this.state;\n\n    return (\n      <form>\n        <label htmlFor=\"name\">Task</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange = {this.handleChange} />\n        <label htmlFor=\"job\">Description</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange = {this.handleChange}\n           onKeyPress={this.keyPressed}\n        />\n        <input type=\"button\" value=\"Submit\" onClick= {this.submitForm}/>\n      </form>\n    )\n  }\n\n  }\n\n  export default Form;\n","import React from 'react';\nimport './App.css';\n\nimport Table from '../table/Table.js'\nimport Form from '../Form/Form.js'\n\nclass App extends React.Component {\n  constructor(props){\n  super(props)\n  this.removeNote = this.removeNote.bind(this);\n  this.handleSubmit = this.handleSubmit.bind(this);\n\n  this.state =  {\n    notes: []\n  }\n  }\n\n  handleSubmit = note => {\n    this.setState({\n      notes: [...this.state.notes, note]\n    })\n  }\n\n  removeNote = index => {\n      const {notes} = this.state;\n\n      this.setState({\n        notes: notes.filter((character, i) => {\n          return i !== index\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Note Taker!</h1>\n        <Form handleSubmit = {this.handleSubmit}/>\n        <Table character={this.state} removeNote={this.removeNote}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}